//
// Generated file, do not edit! Created by opp_msgc 4.3 from applications/messagetracking.msg.
//

#ifndef _MESSAGETRACKING_M_H_
#define _MESSAGETRACKING_M_H_

#include <omnetpp.h>

// opp_msgc version check
#define MSGC_VERSION 0x0403
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgc: 'make clean' should help.
#endif

// cplusplus {{
#include "messagecr_m.h"
// }}



/**
 * Enum generated from <tt>applications/messagetracking.msg</tt> by opp_msgc.
 * <pre>
 * enum MessageType {
 *     MSG_SENSE_NOTIFY = 0; 
 *     MSG_SENSE_RESULT = 1; 
 * };
 * </pre>
 */
enum MessageType {
    MSG_SENSE_NOTIFY = 0,
    MSG_SENSE_RESULT = 1
};

/**
 * Class generated from <tt>applications/messagetracking.msg</tt> by opp_msgc.
 * <pre>
 * packet MsgTracking extends MessageCR {
 *     int msgType;
 *     int msgSize = 10; 
 * }
 * </pre>
 */
class MsgTracking : public ::MessageCR
{
  protected:
    int msgType_var;
    int msgSize_var;

  private:
    void copy(const MsgTracking& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const MsgTracking&);

  public:
    MsgTracking(const char *name=NULL, int kind=0);
    MsgTracking(const MsgTracking& other);
    virtual ~MsgTracking();
    MsgTracking& operator=(const MsgTracking& other);
    virtual MsgTracking *dup() const {return new MsgTracking(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getMsgType() const;
    virtual void setMsgType(int msgType);
    virtual int getMsgSize() const;
    virtual void setMsgSize(int msgSize);
};

inline void doPacking(cCommBuffer *b, MsgTracking& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, MsgTracking& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>applications/messagetracking.msg</tt> by opp_msgc.
 * <pre>
 * packet MsgSenseNotify extends MsgTracking {
 *     int routingType = RT_BROADCAST;
 *     int msgType = MSG_SENSE_NOTIFY;
 *     
 * }
 * </pre>
 */
class MsgSenseNotify : public ::MsgTracking
{
  protected:
    int routingType_var;
    int msgType_var;

  private:
    void copy(const MsgSenseNotify& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const MsgSenseNotify&);

  public:
    MsgSenseNotify(const char *name=NULL, int kind=0);
    MsgSenseNotify(const MsgSenseNotify& other);
    virtual ~MsgSenseNotify();
    MsgSenseNotify& operator=(const MsgSenseNotify& other);
    virtual MsgSenseNotify *dup() const {return new MsgSenseNotify(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getRoutingType() const;
    virtual void setRoutingType(int routingType);
    virtual int getMsgType() const;
    virtual void setMsgType(int msgType);
};

inline void doPacking(cCommBuffer *b, MsgSenseNotify& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, MsgSenseNotify& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>applications/messagetracking.msg</tt> by opp_msgc.
 * <pre>
 * packet MsgSenseResult extends MsgTracking {
 *     int routingType = RT_BROADCAST;
 *     int msgType = MSG_SENSE_RESULT;
 * }
 * </pre>
 */
class MsgSenseResult : public ::MsgTracking
{
  protected:
    int routingType_var;
    int msgType_var;

  private:
    void copy(const MsgSenseResult& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const MsgSenseResult&);

  public:
    MsgSenseResult(const char *name=NULL, int kind=0);
    MsgSenseResult(const MsgSenseResult& other);
    virtual ~MsgSenseResult();
    MsgSenseResult& operator=(const MsgSenseResult& other);
    virtual MsgSenseResult *dup() const {return new MsgSenseResult(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getRoutingType() const;
    virtual void setRoutingType(int routingType);
    virtual int getMsgType() const;
    virtual void setMsgType(int msgType);
};

inline void doPacking(cCommBuffer *b, MsgSenseResult& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, MsgSenseResult& obj) {obj.parsimUnpack(b);}


#endif // _MESSAGETRACKING_M_H_
